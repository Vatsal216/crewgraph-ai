name: CrewGraph AI CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: crewgraph-ai-production-cluster

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        flake8 crewgraph_ai --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 crewgraph_ai --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check crewgraph_ai tests

    - name: Import sorting with isort
      run: |
        isort --check-only crewgraph_ai tests

    - name: Type checking with mypy
      run: |
        mypy crewgraph_ai --ignore-missing-imports

    - name: Run unit tests
      run: |
        python -m pytest tests/unit -v --cov=crewgraph_ai --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        python -m pytest tests/integration -v --cov=crewgraph_ai --cov-append --cov-report=xml

    - name: Run ML component tests
      run: |
        python test_ml_components.py

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r crewgraph_ai -f json -o bandit-results.json || true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-results.json

  # Build and Push Container Image
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Infrastructure Deployment
  infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      working-directory: ./deployment/terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./deployment/terraform
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ./deployment/terraform
      run: terraform apply -auto-approve tfplan

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'

    - name: Deploy infrastructure components
      run: |
        # Create namespaces
        kubectl apply -f deployment/kubernetes/namespace.yaml
        
        # Deploy monitoring stack
        kubectl apply -f deployment/kubernetes/monitoring/
        
        # Install AWS Load Balancer Controller
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName=${{ env.EKS_CLUSTER_NAME }} \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller
        
        # Install Cluster Autoscaler
        helm repo add autoscaler https://kubernetes.github.io/autoscaler
        helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
          -n kube-system \
          --set autoDiscovery.clusterName=${{ env.EKS_CLUSTER_NAME }} \
          --set awsRegion=${{ env.AWS_REGION }}

  # Application Deployment
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, infrastructure]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Deploy CrewGraph AI
      run: |
        # Update image tag in deployment
        sed -i "s|image: crewgraph-ai:.*|image: ${{ needs.build.outputs.image-tag }}|g" deployment/kubernetes/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployment/kubernetes/deployment.yaml
        kubectl apply -f deployment/kubernetes/autoscaling/
        kubectl apply -f deployment/kubernetes/networking/
        
        # Wait for deployment to complete
        kubectl rollout status deployment/crewgraph-ai -n crewgraph-ai --timeout=600s

    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=crewgraph-ai -n crewgraph-ai --timeout=300s
        
        # Get service endpoint
        SERVICE_IP=$(kubectl get svc crewgraph-ai-service -n crewgraph-ai -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run basic health checks
        curl -f http://$SERVICE_IP:8080/health || exit 1
        curl -f http://$SERVICE_IP:8080/ready || exit 1
        
        echo "Deployment successful! Service available at: http://$SERVICE_IP:8000"

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Run performance tests
      run: |
        # Get service endpoint
        SERVICE_IP=$(kubectl get svc crewgraph-ai-service -n crewgraph-ai -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run load test
        k6 run --env BASE_URL=http://$SERVICE_IP:8000 tests/performance/load_test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: k6-results.json

  # Notification
  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [test, security, build, infrastructure, deploy, performance]
    
    steps:
    - name: Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#crewgraph-ai-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          CrewGraph AI Deployment Status: ${{ job.status }}
          
          Pipeline Results:
          - Tests: ${{ needs.test.result }}
          - Security: ${{ needs.security.result }}
          - Build: ${{ needs.build.result }}
          - Infrastructure: ${{ needs.infrastructure.result }}
          - Deploy: ${{ needs.deploy.result }}
          - Performance: ${{ needs.performance.result }}
          
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Branch: ${{ github.ref }}

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v') && needs.build.result == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## CrewGraph AI Release ${{ github.ref }}
          
          ### What's New
          - Enhanced ML optimization capabilities
          - Complete cloud deployment support
          - Integration marketplace
          
          ### Docker Image
          ```
          docker pull ${{ needs.build.outputs.image-tag }}
          ```
          
          ### Deployment
          The application has been automatically deployed to production.
          
          Full changelog: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}