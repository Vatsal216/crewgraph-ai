# CrewGraph AI CI/CD Pipeline

name: CrewGraph AI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,full]
        
    - name: Lint with flake8
      run: |
        flake8 crewgraph_ai --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 crewgraph_ai --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      run: |
        black --check crewgraph_ai
        
    - name: Type check with mypy
      run: |
        mypy crewgraph_ai --ignore-missing-imports
        
    - name: Import test
      run: |
        python -c "import crewgraph_ai; print('✅ CrewGraph AI imports successfully')"
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=crewgraph_ai --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t crewgraph-ai:latest .
        
    - name: Test Docker image
      run: |
        docker run --rm crewgraph-ai:latest
        
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Push to Docker Hub
      if: github.event_name == 'release'
      run: |
        docker tag crewgraph-ai:latest ${{ secrets.DOCKER_USERNAME }}/crewgraph-ai:latest
        docker tag crewgraph-ai:latest ${{ secrets.DOCKER_USERNAME }}/crewgraph-ai:${{ github.event.release.tag_name }}
        docker push ${{ secrets.DOCKER_USERNAME }}/crewgraph-ai:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/crewgraph-ai:${{ github.event.release.tag_name }}

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[full]
        
    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        import crewgraph_ai
        
        # Basic performance test
        start_time = time.time()
        
        # Test intelligence layer
        from crewgraph_ai.intelligence import PerformancePredictor
        predictor = PerformancePredictor()
        
        # Test NLP layer
        from crewgraph_ai.nlp import WorkflowParser
        parser = WorkflowParser()
        
        # Test analytics
        from crewgraph_ai.analytics import PerformanceDashboard
        dashboard = PerformanceDashboard()
        
        # Test optimization
        from crewgraph_ai.optimization import WorkflowOptimizer
        optimizer = WorkflowOptimizer()
        
        end_time = time.time()
        print(f'✅ All modules loaded in {end_time - start_time:.2f} seconds')
        
        if end_time - start_time > 10:
            print('⚠️ Warning: Module loading took longer than expected')
            exit(1)
        "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r crewgraph_ai -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Generate documentation
      run: |
        pip install -e .[full]
        python -c "
        from crewgraph_ai.nlp import DocumentationGenerator
        generator = DocumentationGenerator()
        
        # Generate API documentation
        workflow_def = {
            'name': 'CrewGraph AI Documentation',
            'description': 'Auto-generated API documentation',
            'tasks': [
                {'id': 'generate_docs', 'description': 'Generate comprehensive API documentation', 'type': 'documentation'}
            ]
        }
        
        docs = generator.generate_api_documentation(workflow_def)
        with open('API_DOCS.md', 'w') as f:
            f.write(docs)
            
        print('✅ Documentation generated successfully')
        "
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs